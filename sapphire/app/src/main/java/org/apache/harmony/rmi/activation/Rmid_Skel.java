/*
 * RMI skeleton class
 * for class org.apache.harmony.rmi.activation.Rmid
 * Compatible with stub protocol version 1.1/1.2
 *
 * Generated by DRL RMI Compiler (rmic).
 *
 * DO NOT EDIT!!!
 * Contents subject to change without notice!
 */
package org.apache.harmony.rmi.activation;

import org.apache.harmony.rmi.internal.nls.Messages;

import harmony_java.rmi.MarshalException;
import harmony_java.rmi.MarshalledObject;
import harmony_java.rmi.Remote;
import harmony_java.rmi.UnmarshalException;
import harmony_java.rmi.activation.ActivationDesc;
import harmony_java.rmi.activation.ActivationGroupDesc;
import harmony_java.rmi.activation.ActivationGroupID;
import harmony_java.rmi.activation.ActivationID;
import harmony_java.rmi.activation.ActivationInstantiator;
import harmony_java.rmi.activation.ActivationMonitor;
import harmony_java.rmi.server.Operation;
import harmony_java.rmi.server.RemoteCall;
import harmony_java.rmi.server.Skeleton;
import harmony_java.rmi.server.SkeletonMismatchException;


public final class Rmid_Skel implements Skeleton {

    private static final long interfaceHash = 8470858815147946311L;

    private static final Operation[] operations = {
        new Operation("MarshalledObject activate(ActivationID, boolean)"), //$NON-NLS-1$
        new Operation("ActivationMonitor activeGroup(ActivationGroupID, ActivationInstantiator, long)"), //$NON-NLS-1$
        new Operation("void activeObject(ActivationID, MarshalledObject)"), //$NON-NLS-1$
        new Operation("ActivationDesc getActivationDesc(ActivationID)"), //$NON-NLS-1$
        new Operation("ActivationGroupDesc getActivationGroupDesc(ActivationGroupID)"), //$NON-NLS-1$
        new Operation("void inactiveGroup(ActivationGroupID, long)"), //$NON-NLS-1$
        new Operation("void inactiveObject(ActivationID)"), //$NON-NLS-1$
        new Operation("ActivationGroupID registerGroup(ActivationGroupDesc)"), //$NON-NLS-1$
        new Operation("ActivationID registerObject(ActivationDesc)"), //$NON-NLS-1$
        new Operation("ActivationDesc setActivationDesc(ActivationID, ActivationDesc)"), //$NON-NLS-1$
        new Operation("ActivationGroupDesc setActivationGroupDesc(ActivationGroupID, ActivationGroupDesc)"), //$NON-NLS-1$
        new Operation("void shutdown()"), //$NON-NLS-1$
        new Operation("void unregisterGroup(ActivationGroupID)"), //$NON-NLS-1$
        new Operation("void unregisterObject(ActivationID)") //$NON-NLS-1$
    };

    public Operation[] getOperations() {
        return (Operation[]) operations.clone();
    }

    public void dispatch(Remote obj, RemoteCall call, int opnum, long hash) throws java.lang.Exception {
        if (opnum < 0) {
            if (hash == -8767355154875805558L) {
                opnum = 0;
            } else if (hash == -4575843150759415294L) {
                opnum = 1;
            } else if (hash == 2543984342209939736L) {
                opnum = 2;
            } else if (hash == 4830055440982622087L) {
                opnum = 3;
            } else if (hash == -8701843806548736528L) {
                opnum = 4;
            } else if (hash == -399287892768650944L) {
                opnum = 5;
            } else if (hash == -4165404120701281807L) {
                opnum = 6;
            } else if (hash == 6921515268192657754L) {
                opnum = 7;
            } else if (hash == -3006759798994351347L) {
                opnum = 8;
            } else if (hash == 7128043237057180796L) {
                opnum = 9;
            } else if (hash == 1213918527826541191L) {
                opnum = 10;
            } else if (hash == -7207851917985848402L) {
                opnum = 11;
            } else if (hash == 3768097077835970701L) {
                opnum = 12;
            } else if (hash == -6843850585331411084L) {
                opnum = 13;
            } else {
                // rmi.28=Invalid method hash: {0}
                throw new UnmarshalException(Messages.getString("rmi.28", hash)); //$NON-NLS-1$
            }
        } else {
            if (hash != interfaceHash) {
                // rmi.29=Interface hash mismatch, expected: {0}, received: {1}
                throw new SkeletonMismatchException(
                        Messages.getString("rmi.29", interfaceHash, hash)); //$NON-NLS-1$ //$NON-NLS-2$
            }
        }

        org.apache.harmony.rmi.activation.Rmid server = (org.apache.harmony.rmi.activation.Rmid) obj;

        switch (opnum) {

        case 0: {    // activate(ActivationID, boolean)

            ActivationID $param_ActivationID_1;
            boolean $param_boolean_2;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_ActivationID_1 = (ActivationID) in.readObject();
                $param_boolean_2 = in.readBoolean();
            } catch (java.io.IOException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            MarshalledObject $result = server.activate($param_ActivationID_1, $param_boolean_2);

            try {
                java.io.ObjectOutput out = call.getResultStream(true);
                out.writeObject($result);
            } catch (java.io.IOException e) {
                throw new MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        case 1: {    // activeGroup(ActivationGroupID, ActivationInstantiator, long)

            ActivationGroupID $param_ActivationGroupID_1;
            ActivationInstantiator $param_ActivationInstantiator_2;
            long $param_long_3;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_ActivationGroupID_1 = (ActivationGroupID) in.readObject();
                $param_ActivationInstantiator_2 = (ActivationInstantiator) in.readObject();
                $param_long_3 = in.readLong();
            } catch (java.io.IOException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            ActivationMonitor $result = server.activeGroup($param_ActivationGroupID_1, $param_ActivationInstantiator_2, $param_long_3);

            try {
                java.io.ObjectOutput out = call.getResultStream(true);
                out.writeObject($result);
            } catch (java.io.IOException e) {
                throw new MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        case 2: {    // activeObject(ActivationID, MarshalledObject)

            ActivationID $param_ActivationID_1;
            MarshalledObject $param_MarshalledObject_2;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_ActivationID_1 = (ActivationID) in.readObject();
                $param_MarshalledObject_2 = (MarshalledObject) in.readObject();
            } catch (java.io.IOException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            server.activeObject($param_ActivationID_1, $param_MarshalledObject_2);

            try {
                call.getResultStream(true);
            } catch (java.io.IOException e) {
                throw new MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        case 3: {    // getActivationDesc(ActivationID)

            ActivationID $param_ActivationID_1;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_ActivationID_1 = (ActivationID) in.readObject();
            } catch (java.io.IOException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            ActivationDesc $result = server.getActivationDesc($param_ActivationID_1);

            try {
                java.io.ObjectOutput out = call.getResultStream(true);
                out.writeObject($result);
            } catch (java.io.IOException e) {
                throw new MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        case 4: {    // getActivationGroupDesc(ActivationGroupID)

            ActivationGroupID $param_ActivationGroupID_1;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_ActivationGroupID_1 = (ActivationGroupID) in.readObject();
            } catch (java.io.IOException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            ActivationGroupDesc $result = server.getActivationGroupDesc($param_ActivationGroupID_1);

            try {
                java.io.ObjectOutput out = call.getResultStream(true);
                out.writeObject($result);
            } catch (java.io.IOException e) {
                throw new MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        case 5: {    // inactiveGroup(ActivationGroupID, long)

            ActivationGroupID $param_ActivationGroupID_1;
            long $param_long_2;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_ActivationGroupID_1 = (ActivationGroupID) in.readObject();
                $param_long_2 = in.readLong();
            } catch (java.io.IOException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            server.inactiveGroup($param_ActivationGroupID_1, $param_long_2);

            try {
                call.getResultStream(true);
            } catch (java.io.IOException e) {
                throw new MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        case 6: {    // inactiveObject(ActivationID)

            ActivationID $param_ActivationID_1;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_ActivationID_1 = (ActivationID) in.readObject();
            } catch (java.io.IOException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            server.inactiveObject($param_ActivationID_1);

            try {
                call.getResultStream(true);
            } catch (java.io.IOException e) {
                throw new MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        case 7: {    // registerGroup(ActivationGroupDesc)

            ActivationGroupDesc $param_ActivationGroupDesc_1;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_ActivationGroupDesc_1 = (ActivationGroupDesc) in.readObject();
            } catch (java.io.IOException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            ActivationGroupID $result = server.registerGroup($param_ActivationGroupDesc_1);

            try {
                java.io.ObjectOutput out = call.getResultStream(true);
                out.writeObject($result);
            } catch (java.io.IOException e) {
                throw new MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        case 8: {    // registerObject(ActivationDesc)

            ActivationDesc $param_ActivationDesc_1;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_ActivationDesc_1 = (ActivationDesc) in.readObject();
            } catch (java.io.IOException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            ActivationID $result = server.registerObject($param_ActivationDesc_1);

            try {
                java.io.ObjectOutput out = call.getResultStream(true);
                out.writeObject($result);
            } catch (java.io.IOException e) {
                throw new MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        case 9: {    // setActivationDesc(ActivationID, ActivationDesc)

            ActivationID $param_ActivationID_1;
            ActivationDesc $param_ActivationDesc_2;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_ActivationID_1 = (ActivationID) in.readObject();
                $param_ActivationDesc_2 = (ActivationDesc) in.readObject();
            } catch (java.io.IOException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            ActivationDesc $result = server.setActivationDesc($param_ActivationID_1, $param_ActivationDesc_2);

            try {
                java.io.ObjectOutput out = call.getResultStream(true);
                out.writeObject($result);
            } catch (java.io.IOException e) {
                throw new MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        case 10: {    // setActivationGroupDesc(ActivationGroupID, ActivationGroupDesc)

            ActivationGroupID $param_ActivationGroupID_1;
            ActivationGroupDesc $param_ActivationGroupDesc_2;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_ActivationGroupID_1 = (ActivationGroupID) in.readObject();
                $param_ActivationGroupDesc_2 = (ActivationGroupDesc) in.readObject();
            } catch (java.io.IOException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            ActivationGroupDesc $result = server.setActivationGroupDesc($param_ActivationGroupID_1, $param_ActivationGroupDesc_2);

            try {
                java.io.ObjectOutput out = call.getResultStream(true);
                out.writeObject($result);
            } catch (java.io.IOException e) {
                throw new MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        case 11: {    // shutdown()

            call.releaseInputStream();

            server.shutdown();

            try {
                call.getResultStream(true);
            } catch (java.io.IOException e) {
                throw new MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        case 12: {    // unregisterGroup(ActivationGroupID)

            ActivationGroupID $param_ActivationGroupID_1;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_ActivationGroupID_1 = (ActivationGroupID) in.readObject();
            } catch (java.io.IOException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            server.unregisterGroup($param_ActivationGroupID_1);

            try {
                call.getResultStream(true);
            } catch (java.io.IOException e) {
                throw new MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        case 13: {    // unregisterObject(ActivationID)

            ActivationID $param_ActivationID_1;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_ActivationID_1 = (ActivationID) in.readObject();
            } catch (java.io.IOException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                throw new UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            server.unregisterObject($param_ActivationID_1);

            try {
                call.getResultStream(true);
            } catch (java.io.IOException e) {
                throw new MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        default:
            // rmi.2B=Invalid method number: {0}
            throw new UnmarshalException(Messages.getString("rmi.2B", opnum)); //$NON-NLS-1$
        }
    }
}
