/*
 * RMI stub class
 * for class org.apache.harmony.rmi.activation.Rmid
 * Compatible with stub protocol version 1.1/1.2
 *
 * Generated by DRL RMI Compiler (rmic).
 *
 * DO NOT EDIT!!!
 * Contents subject to change without notice!
 */
package org.apache.harmony.rmi.activation;

import org.apache.harmony.rmi.internal.nls.Messages;

import harmony_java.rmi.MarshalException;
import harmony_java.rmi.MarshalledObject;
import harmony_java.rmi.Remote;
import harmony_java.rmi.RemoteException;
import harmony_java.rmi.UnexpectedException;
import harmony_java.rmi.UnmarshalException;
import harmony_java.rmi.activation.ActivationDesc;
import harmony_java.rmi.activation.ActivationException;
import harmony_java.rmi.activation.ActivationGroupDesc;
import harmony_java.rmi.activation.ActivationGroupID;
import harmony_java.rmi.activation.ActivationID;
import harmony_java.rmi.activation.ActivationInstantiator;
import harmony_java.rmi.activation.ActivationMonitor;
import harmony_java.rmi.activation.ActivationSystem;
import harmony_java.rmi.activation.Activator;
import harmony_java.rmi.activation.UnknownGroupException;
import harmony_java.rmi.activation.UnknownObjectException;
import harmony_java.rmi.server.Operation;
import harmony_java.rmi.server.RemoteCall;
import harmony_java.rmi.server.RemoteObject;
import harmony_java.rmi.server.RemoteRef;
import harmony_java.rmi.server.RemoteStub;


public final class Rmid_Stub extends RemoteStub
        implements ActivationSystem, ActivationMonitor, Activator, Remote {

    private static final long serialVersionUID = 2;

    private static final long interfaceHash = 8470858815147946311L;

    private static boolean useNewInvoke;

    private static final Operation[] operations = {
        new Operation("MarshalledObject activate(ActivationID, boolean)"), //$NON-NLS-1$
        new Operation("ActivationMonitor activeGroup(ActivationGroupID, ActivationInstantiator, long)"), //$NON-NLS-1$
        new Operation("void activeObject(ActivationID, MarshalledObject)"), //$NON-NLS-1$
        new Operation("ActivationDesc getActivationDesc(ActivationID)"), //$NON-NLS-1$
        new Operation("ActivationGroupDesc getActivationGroupDesc(ActivationGroupID)"), //$NON-NLS-1$
        new Operation("void inactiveGroup(ActivationGroupID, long)"), //$NON-NLS-1$
        new Operation("void inactiveObject(ActivationID)"), //$NON-NLS-1$
        new Operation("ActivationGroupID registerGroup(ActivationGroupDesc)"), //$NON-NLS-1$
        new Operation("ActivationID registerObject(ActivationDesc)"), //$NON-NLS-1$
        new Operation("ActivationDesc setActivationDesc(ActivationID, ActivationDesc)"), //$NON-NLS-1$
        new Operation("ActivationGroupDesc setActivationGroupDesc(ActivationGroupID, ActivationGroupDesc)"), //$NON-NLS-1$
        new Operation("void shutdown()"), //$NON-NLS-1$
        new Operation("void unregisterGroup(ActivationGroupID)"), //$NON-NLS-1$
        new Operation("void unregisterObject(ActivationID)") //$NON-NLS-1$
    };

    private static java.lang.reflect.Method $method_activate_0;
    private static java.lang.reflect.Method $method_activeGroup_1;
    private static java.lang.reflect.Method $method_activeObject_2;
    private static java.lang.reflect.Method $method_getActivationDesc_3;
    private static java.lang.reflect.Method $method_getActivationGroupDesc_4;
    private static java.lang.reflect.Method $method_inactiveGroup_5;
    private static java.lang.reflect.Method $method_inactiveObject_6;
    private static java.lang.reflect.Method $method_registerGroup_7;
    private static java.lang.reflect.Method $method_registerObject_8;
    private static java.lang.reflect.Method $method_setActivationDesc_9;
    private static java.lang.reflect.Method $method_setActivationGroupDesc_10;
    private static java.lang.reflect.Method $method_shutdown_11;
    private static java.lang.reflect.Method $method_unregisterGroup_12;
    private static java.lang.reflect.Method $method_unregisterObject_13;

    static {
        try {
            RemoteRef.class.getMethod("invoke", new java.lang.Class[] {Remote.class, java.lang.reflect.Method.class, java.lang.Object[].class, long.class}); //$NON-NLS-1$

            $method_activate_0 = Activator.class.getMethod("activate", new java.lang.Class[] {ActivationID.class, boolean.class}); //$NON-NLS-1$
            $method_activeGroup_1 = ActivationSystem.class.getMethod("activeGroup", new java.lang.Class[] {ActivationGroupID.class, ActivationInstantiator.class, long.class}); //$NON-NLS-1$
            $method_activeObject_2 = ActivationMonitor.class.getMethod("activeObject", new java.lang.Class[] {ActivationID.class, MarshalledObject.class}); //$NON-NLS-1$
            $method_getActivationDesc_3 = ActivationSystem.class.getMethod("getActivationDesc", new java.lang.Class[] {ActivationID.class}); //$NON-NLS-1$
            $method_getActivationGroupDesc_4 = ActivationSystem.class.getMethod("getActivationGroupDesc", new java.lang.Class[] {ActivationGroupID.class}); //$NON-NLS-1$
            $method_inactiveGroup_5 = ActivationMonitor.class.getMethod("inactiveGroup", new java.lang.Class[] {ActivationGroupID.class, long.class}); //$NON-NLS-1$
            $method_inactiveObject_6 = ActivationMonitor.class.getMethod("inactiveObject", new java.lang.Class[] {ActivationID.class}); //$NON-NLS-1$
            $method_registerGroup_7 = ActivationSystem.class.getMethod("registerGroup", new java.lang.Class[] {ActivationGroupDesc.class}); //$NON-NLS-1$
            $method_registerObject_8 = ActivationSystem.class.getMethod("registerObject", new java.lang.Class[] {ActivationDesc.class}); //$NON-NLS-1$
            $method_setActivationDesc_9 = ActivationSystem.class.getMethod("setActivationDesc", new java.lang.Class[] {ActivationID.class, ActivationDesc.class}); //$NON-NLS-1$
            $method_setActivationGroupDesc_10 = ActivationSystem.class.getMethod("setActivationGroupDesc", new java.lang.Class[] {ActivationGroupID.class, ActivationGroupDesc.class}); //$NON-NLS-1$
            $method_shutdown_11 = ActivationSystem.class.getMethod("shutdown", new java.lang.Class[] {}); //$NON-NLS-1$
            $method_unregisterGroup_12 = ActivationSystem.class.getMethod("unregisterGroup", new java.lang.Class[] {ActivationGroupID.class}); //$NON-NLS-1$
            $method_unregisterObject_13 = ActivationSystem.class.getMethod("unregisterObject", new java.lang.Class[] {ActivationID.class}); //$NON-NLS-1$

            useNewInvoke = true;
        } catch (java.lang.NoSuchMethodException e) {
            useNewInvoke = false;
        }
    }

    public Rmid_Stub() {
        super();
    }

    public Rmid_Stub(RemoteRef ref) {
        super(ref);
    }

    // Implementation of activate(ActivationID, boolean)
    public MarshalledObject activate(ActivationID $param_ActivationID_1, boolean $param_boolean_2)
            throws ActivationException, UnknownObjectException, RemoteException {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_activate_0, new java.lang.Object[] {$param_ActivationID_1, new java.lang.Boolean($param_boolean_2)}, -8767355154875805558L);
                return ((MarshalledObject) $result);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 0, interfaceHash);

                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_ActivationID_1);
                    out.writeBoolean($param_boolean_2);
                } catch (java.io.IOException e) {
                    // rmi.26=Error marshalling arguments
                    throw new MarshalException(Messages.getString("rmi.26"), e); //$NON-NLS-1$
                }

                ref.invoke(call);

                MarshalledObject $result;

                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = (MarshalledObject) in.readObject();
                } catch (java.io.IOException e) {
                    // rmi.27=Error unmarshalling return value
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } catch (java.lang.ClassNotFoundException e) {
                    // rmi.27=Error unmarshalling return value
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } finally {
                    ref.done(call);
                }

                return $result;
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (ActivationException e) {
            throw e;
        } catch (java.lang.Exception e) {
            // rmi.0C=Undeclared checked exception
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }

    // Implementation of activeGroup(ActivationGroupID, ActivationInstantiator, long)
    public ActivationMonitor activeGroup(ActivationGroupID $param_ActivationGroupID_1, ActivationInstantiator $param_ActivationInstantiator_2, long $param_long_3)
            throws UnknownGroupException, ActivationException, RemoteException {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_activeGroup_1, new java.lang.Object[] {$param_ActivationGroupID_1, $param_ActivationInstantiator_2, new java.lang.Long($param_long_3)}, -4575843150759415294L);
                return ((ActivationMonitor) $result);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 1, interfaceHash);

                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_ActivationGroupID_1);
                    out.writeObject($param_ActivationInstantiator_2);
                    out.writeLong($param_long_3);
                } catch (java.io.IOException e) {
                    throw new MarshalException(Messages.getString("rmi.26"), e); //$NON-NLS-1$
                }

                ref.invoke(call);

                ActivationMonitor $result;

                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = (ActivationMonitor) in.readObject();
                } catch (java.io.IOException e) {
                    // rmi.27=Error unmarshalling return value
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } catch (java.lang.ClassNotFoundException e) {
                    // rmi.27=Error unmarshalling return value
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } finally {
                    ref.done(call);
                }

                return $result;
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (ActivationException e) {
            throw e;
        } catch (java.lang.Exception e) {
            // rmi.0C=Undeclared checked exception
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }

    // Implementation of activeObject(ActivationID, MarshalledObject)
    public void activeObject(ActivationID $param_ActivationID_1, MarshalledObject $param_MarshalledObject_2)
            throws UnknownObjectException, RemoteException {
        try {
            if (useNewInvoke) {
                ref.invoke(this, $method_activeObject_2, new java.lang.Object[] {$param_ActivationID_1, $param_MarshalledObject_2}, 2543984342209939736L);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 2, interfaceHash);

                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_ActivationID_1);
                    out.writeObject($param_MarshalledObject_2);
                } catch (java.io.IOException e) {
                    // rmi.26=Error marshalling arguments
                    throw new MarshalException(Messages.getString("rmi.26"), e); //$NON-NLS-1$
                }

                ref.invoke(call);

                ref.done(call);
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (UnknownObjectException e) {
            throw e;
        } catch (java.lang.Exception e) {
            // rmi.0C=Undeclared checked exception
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }

    // Implementation of getActivationDesc(ActivationID)
    public ActivationDesc getActivationDesc(ActivationID $param_ActivationID_1)
            throws ActivationException, UnknownObjectException, RemoteException {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_getActivationDesc_3, new java.lang.Object[] {$param_ActivationID_1}, 4830055440982622087L);
                return ((ActivationDesc) $result);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 3, interfaceHash);

                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_ActivationID_1);
                } catch (java.io.IOException e) {
                    // rmi.26=Error marshalling arguments
                    throw new MarshalException(Messages.getString("rmi.26"), e); //$NON-NLS-1$
                }

                ref.invoke(call);

                ActivationDesc $result;

                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = (ActivationDesc) in.readObject();
                } catch (java.io.IOException e) {
                    // rmi.27=Error unmarshalling return value
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } catch (java.lang.ClassNotFoundException e) {
                    // rmi.27=Error unmarshalling return value
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } finally {
                    ref.done(call);
                }

                return $result;
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (ActivationException e) {
            throw e;
        } catch (java.lang.Exception e) {
            // rmi.0C=Undeclared checked exception
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }

    // Implementation of getActivationGroupDesc(ActivationGroupID)
    public ActivationGroupDesc getActivationGroupDesc(ActivationGroupID $param_ActivationGroupID_1)
            throws ActivationException, UnknownGroupException, RemoteException {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_getActivationGroupDesc_4, new java.lang.Object[] {$param_ActivationGroupID_1}, -8701843806548736528L);
                return ((ActivationGroupDesc) $result);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 4, interfaceHash);

                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_ActivationGroupID_1);
                } catch (java.io.IOException e) {
                    // rmi.26=Error marshalling arguments
                    throw new MarshalException(Messages.getString("rmi.26"), e); //$NON-NLS-1$
                }

                ref.invoke(call);

                ActivationGroupDesc $result;

                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = (ActivationGroupDesc) in.readObject();
                } catch (java.io.IOException e) {
                    // rmi.27=Error unmarshalling return value
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } catch (java.lang.ClassNotFoundException e) {
                    // rmi.27=Error unmarshalling return value
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } finally {
                    ref.done(call);
                }

                return $result;
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (ActivationException e) {
            throw e;
        } catch (java.lang.Exception e) {
            // rmi.0C=Undeclared checked exception
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }

    // Implementation of inactiveGroup(ActivationGroupID, long)
    public void inactiveGroup(ActivationGroupID $param_ActivationGroupID_1, long $param_long_2)
            throws UnknownGroupException, RemoteException {
        try {
            if (useNewInvoke) {
                ref.invoke(this, $method_inactiveGroup_5, new java.lang.Object[] {$param_ActivationGroupID_1, new java.lang.Long($param_long_2)}, -399287892768650944L);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 5, interfaceHash);

                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_ActivationGroupID_1);
                    out.writeLong($param_long_2);
                } catch (java.io.IOException e) {
                    // rmi.26=Error marshalling arguments
                    throw new MarshalException(Messages.getString("rmi.26"), e); //$NON-NLS-1$
                }

                ref.invoke(call);

                ref.done(call);
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (UnknownGroupException e) {
            throw e;
        } catch (java.lang.Exception e) {
            // rmi.0C=Undeclared checked exception
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }

    // Implementation of inactiveObject(ActivationID)
    public void inactiveObject(ActivationID $param_ActivationID_1)
            throws UnknownObjectException, RemoteException {
        try {
            if (useNewInvoke) {
                ref.invoke(this, $method_inactiveObject_6, new java.lang.Object[] {$param_ActivationID_1}, -4165404120701281807L);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 6, interfaceHash);

                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_ActivationID_1);
                } catch (java.io.IOException e) {
                    // rmi.26=Error marshalling arguments
                    throw new MarshalException(Messages.getString("rmi.26"), e); //$NON-NLS-1$
                }

                ref.invoke(call);

                ref.done(call);
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (UnknownObjectException e) {
            throw e;
        } catch (java.lang.Exception e) {
            // rmi.0C=Undeclared checked exception
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }

    // Implementation of registerGroup(ActivationGroupDesc)
    public ActivationGroupID registerGroup(ActivationGroupDesc $param_ActivationGroupDesc_1)
            throws ActivationException, RemoteException {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_registerGroup_7, new java.lang.Object[] {$param_ActivationGroupDesc_1}, 6921515268192657754L);
                return ((ActivationGroupID) $result);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 7, interfaceHash);

                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_ActivationGroupDesc_1);
                } catch (java.io.IOException e) {
                    // rmi.26=Error marshalling arguments
                    throw new MarshalException(Messages.getString("rmi.26"), e); //$NON-NLS-1$
                }

                ref.invoke(call);

                ActivationGroupID $result;

                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = (ActivationGroupID) in.readObject();
                } catch (java.io.IOException e) {
                    // rmi.27=Error unmarshalling return value
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } catch (java.lang.ClassNotFoundException e) {
                    // rmi.27=Error unmarshalling return value
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } finally {
                    ref.done(call);
                }

                return $result;
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (ActivationException e) {
            throw e;
        } catch (java.lang.Exception e) {
            // rmi.0C=Undeclared checked exception
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }

    // Implementation of registerObject(ActivationDesc)
    public ActivationID registerObject(ActivationDesc $param_ActivationDesc_1)
            throws ActivationException, UnknownGroupException, RemoteException {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_registerObject_8, new java.lang.Object[] {$param_ActivationDesc_1}, -3006759798994351347L);
                return ((ActivationID) $result);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 8, interfaceHash);

                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_ActivationDesc_1);
                } catch (java.io.IOException e) {
                    // rmi.26=Error marshalling arguments
                    throw new MarshalException(Messages.getString("rmi.26"), e); //$NON-NLS-1$
                }

                ref.invoke(call);

                ActivationID $result;

                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = (ActivationID) in.readObject();
                } catch (java.io.IOException e) {
                    // rmi.27=Error unmarshalling return value
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } catch (java.lang.ClassNotFoundException e) {
                    //rmi.27=Error unmarshalling return value
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } finally {
                    ref.done(call);
                }

                return $result;
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (ActivationException e) {
            throw e;
        } catch (java.lang.Exception e) {
            // rmi.0C=Undeclared checked exception
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }

    // Implementation of setActivationDesc(ActivationID, ActivationDesc)
    public ActivationDesc setActivationDesc(ActivationID $param_ActivationID_1, ActivationDesc $param_ActivationDesc_2)
            throws ActivationException, UnknownObjectException, UnknownGroupException, RemoteException {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_setActivationDesc_9, new java.lang.Object[] {$param_ActivationID_1, $param_ActivationDesc_2}, 7128043237057180796L);
                return ((ActivationDesc) $result);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 9, interfaceHash);

                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_ActivationID_1);
                    out.writeObject($param_ActivationDesc_2);
                } catch (java.io.IOException e) {
                    // rmi.26=Error marshalling arguments
                    throw new MarshalException(Messages.getString("rmi.26"), e); //$NON-NLS-1$
                }

                ref.invoke(call);

                ActivationDesc $result;

                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = (ActivationDesc) in.readObject();
                } catch (java.io.IOException e) {
                    // rmi.27=Error unmarshalling return value
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } catch (java.lang.ClassNotFoundException e) {
                    // rmi.27=Error unmarshalling return value
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } finally {
                    ref.done(call);
                }

                return $result;
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (ActivationException e) {
            throw e;
        } catch (java.lang.Exception e) {
            // rmi.0C=Undeclared checked exception
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }

    // Implementation of setActivationGroupDesc(ActivationGroupID, ActivationGroupDesc)
    public ActivationGroupDesc setActivationGroupDesc(ActivationGroupID $param_ActivationGroupID_1, ActivationGroupDesc $param_ActivationGroupDesc_2)
            throws ActivationException, UnknownGroupException, RemoteException {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_setActivationGroupDesc_10, new java.lang.Object[] {$param_ActivationGroupID_1, $param_ActivationGroupDesc_2}, 1213918527826541191L);
                return ((ActivationGroupDesc) $result);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 10, interfaceHash);

                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_ActivationGroupID_1);
                    out.writeObject($param_ActivationGroupDesc_2);
                } catch (java.io.IOException e) {
                    // rmi.26=Error marshalling arguments
                    throw new MarshalException(Messages.getString("rmi.26"), e); //$NON-NLS-1$
                }

                ref.invoke(call);

                ActivationGroupDesc $result;

                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = (ActivationGroupDesc) in.readObject();
                } catch (java.io.IOException e) {
                    // rmi.27=Error unmarshalling return value
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } catch (java.lang.ClassNotFoundException e) {
                    // rmi.27=Error unmarshalling return value
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } finally {
                    ref.done(call);
                }

                return $result;
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (ActivationException e) {
            throw e;
        } catch (java.lang.Exception e) {
            // rmi.0C=Undeclared checked exception
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }

    // Implementation of shutdown()
    public void shutdown()
            throws RemoteException {
        try {
            if (useNewInvoke) {
                ref.invoke(this, $method_shutdown_11, null, -7207851917985848402L);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 11, interfaceHash);

                ref.invoke(call);

                ref.done(call);
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (java.lang.Exception e) {
            // rmi.0C=Undeclared checked exception
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }

    // Implementation of unregisterGroup(ActivationGroupID)
    public void unregisterGroup(ActivationGroupID $param_ActivationGroupID_1)
            throws ActivationException, UnknownGroupException, RemoteException {
        try {
            if (useNewInvoke) {
                ref.invoke(this, $method_unregisterGroup_12, new java.lang.Object[] {$param_ActivationGroupID_1}, 3768097077835970701L);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 12, interfaceHash);

                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_ActivationGroupID_1);
                } catch (java.io.IOException e) {
                    // rmi.26=Error marshalling arguments
                    throw new MarshalException(Messages.getString("rmi.26"), e); //$NON-NLS-1$
                }

                ref.invoke(call);

                ref.done(call);
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (ActivationException e) {
            throw e;
        } catch (java.lang.Exception e) {
            // rmi.0C=Undeclared checked exception
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }

    // Implementation of unregisterObject(ActivationID)
    public void unregisterObject(ActivationID $param_ActivationID_1)
            throws ActivationException, UnknownObjectException, RemoteException {
        try {
            if (useNewInvoke) {
                ref.invoke(this, $method_unregisterObject_13, new java.lang.Object[] {$param_ActivationID_1}, -6843850585331411084L);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 13, interfaceHash);

                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_ActivationID_1);
                } catch (java.io.IOException e) {
                    // rmi.26=Error marshalling arguments
                    throw new MarshalException(Messages.getString("rmi.26"), e); //$NON-NLS-1$
                }

                ref.invoke(call);

                ref.done(call);
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (ActivationException e) {
            throw e;
        } catch (java.lang.Exception e) {
            // rmi.0C=Undeclared checked exception
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }
}
