/*
 * RMI stub class
 * for class org.apache.harmony.rmi.registry.RegistryImpl
 * Compatible with stub protocol version 1.1/1.2
 *
 * Generated by DRL RMI Compiler (rmic).
 *
 * DO NOT EDIT!!!
 * Contents subject to change without notice!
 */
package org.apache.harmony.rmi.registry;

import org.apache.harmony.rmi.internal.nls.Messages;

import harmony_java.rmi.AccessException;
import harmony_java.rmi.AlreadyBoundException;
import harmony_java.rmi.MarshalException;
import harmony_java.rmi.NotBoundException;
import harmony_java.rmi.Remote;
import harmony_java.rmi.RemoteException;
import harmony_java.rmi.UnexpectedException;
import harmony_java.rmi.UnmarshalException;
import harmony_java.rmi.registry.Registry;
import harmony_java.rmi.server.Operation;
import harmony_java.rmi.server.RemoteCall;
import harmony_java.rmi.server.RemoteObject;
import harmony_java.rmi.server.RemoteRef;
import harmony_java.rmi.server.RemoteStub;


public final class RegistryImpl_Stub extends RemoteStub
        implements Registry, Remote {

    private static final long serialVersionUID = 2;

    private static final long interfaceHash = 4905912898345647071L;

    private static boolean useNewInvoke;

    private static final Operation[] operations = {
        new Operation("void bind(java.lang.String, Remote)"), //$NON-NLS-1$
        new Operation("java.lang.String list()[]"), //$NON-NLS-1$
        new Operation("Remote lookup(java.lang.String)"), //$NON-NLS-1$
        new Operation("void rebind(java.lang.String, Remote)"), //$NON-NLS-1$
        new Operation("void unbind(java.lang.String)") //$NON-NLS-1$
    };

    private static java.lang.reflect.Method $method_bind_0;
    private static java.lang.reflect.Method $method_list_1;
    private static java.lang.reflect.Method $method_lookup_2;
    private static java.lang.reflect.Method $method_rebind_3;
    private static java.lang.reflect.Method $method_unbind_4;

    static {
        try {
            RemoteRef.class.getMethod("invoke", new java.lang.Class[] {Remote.class, java.lang.reflect.Method.class, java.lang.Object[].class, long.class}); //$NON-NLS-1$

            $method_bind_0 = Registry.class.getMethod("bind", new java.lang.Class[] {java.lang.String.class, Remote.class}); //$NON-NLS-1$
            $method_list_1 = Registry.class.getMethod("list", new java.lang.Class[] {}); //$NON-NLS-1$
            $method_lookup_2 = Registry.class.getMethod("lookup", new java.lang.Class[] {java.lang.String.class}); //$NON-NLS-1$
            $method_rebind_3 = Registry.class.getMethod("rebind", new java.lang.Class[] {java.lang.String.class, Remote.class}); //$NON-NLS-1$
            $method_unbind_4 = Registry.class.getMethod("unbind", new java.lang.Class[] {java.lang.String.class}); //$NON-NLS-1$

            useNewInvoke = true;
        } catch (java.lang.NoSuchMethodException e) {
            useNewInvoke = false;
        }
    }

    public RegistryImpl_Stub() {
        super();
    }

    public RegistryImpl_Stub(RemoteRef ref) {
        super(ref);
    }

    // Implementation of bind(String, Remote)
    public void bind(java.lang.String $param_String_1, Remote $param_Remote_2)
            throws RemoteException, AlreadyBoundException, AccessException {
        try {
            if (useNewInvoke) {
                ref.invoke(this, $method_bind_0, new java.lang.Object[] {$param_String_1, $param_Remote_2}, 7583982177005850366L);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 0, interfaceHash);

                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_String_1);
                    out.writeObject($param_Remote_2);
                } catch (java.io.IOException e) {
                    throw new MarshalException(Messages.getString("rmi.26"), e); //$NON-NLS-1$
                }

                ref.invoke(call);

                ref.done(call);
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (AlreadyBoundException e) {
            throw e;
        } catch (java.lang.Exception e) {
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }

    // Implementation of list()
    public java.lang.String[] list()
            throws RemoteException, AccessException {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_list_1, null, 2571371476350237748L);
                return ((java.lang.String[]) $result);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 1, interfaceHash);

                ref.invoke(call);

                java.lang.String[] $result;

                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = (java.lang.String[]) in.readObject();
                } catch (java.io.IOException e) {
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } catch (java.lang.ClassNotFoundException e) {
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } finally {
                    ref.done(call);
                }

                return $result;
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (java.lang.Exception e) {
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }

    // Implementation of lookup(String)
    public Remote lookup(java.lang.String $param_String_1)
            throws RemoteException, NotBoundException, AccessException {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_lookup_2, new java.lang.Object[] {$param_String_1}, -7538657168040752697L);
                return ((Remote) $result);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 2, interfaceHash);

                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_String_1);
                } catch (java.io.IOException e) {
                    throw new MarshalException(Messages.getString("rmi.26"), e); //$NON-NLS-1$
                }

                ref.invoke(call);

                Remote $result;

                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = (Remote) in.readObject();
                } catch (java.io.IOException e) {
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } catch (java.lang.ClassNotFoundException e) {
                    throw new UnmarshalException(Messages.getString("rmi.27"), e); //$NON-NLS-1$
                } finally {
                    ref.done(call);
                }

                return $result;
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (NotBoundException e) {
            throw e;
        } catch (java.lang.Exception e) {
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }

    // Implementation of rebind(String, Remote)
    public void rebind(java.lang.String $param_String_1, Remote $param_Remote_2)
            throws RemoteException, AccessException {
        try {
            if (useNewInvoke) {
                ref.invoke(this, $method_rebind_3, new java.lang.Object[] {$param_String_1, $param_Remote_2}, -8381844669958460146L);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 3, interfaceHash);

                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_String_1);
                    out.writeObject($param_Remote_2);
                } catch (java.io.IOException e) {
                    throw new MarshalException(Messages.getString("rmi.26"), e); //$NON-NLS-1$
                }

                ref.invoke(call);

                ref.done(call);
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (java.lang.Exception e) {
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }

    // Implementation of unbind(String)
    public void unbind(java.lang.String $param_String_1)
            throws RemoteException, NotBoundException, AccessException {
        try {
            if (useNewInvoke) {
                ref.invoke(this, $method_unbind_4, new java.lang.Object[] {$param_String_1}, 7305022919901907578L);
            } else {
                RemoteCall call = ref.newCall((RemoteObject) this, operations, 4, interfaceHash);

                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_String_1);
                } catch (java.io.IOException e) {
                    throw new MarshalException(Messages.getString("rmi.26"), e); //$NON-NLS-1$
                }

                ref.invoke(call);

                ref.done(call);
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (RemoteException e) {
            throw e;
        } catch (NotBoundException e) {
            throw e;
        } catch (java.lang.Exception e) {
            throw new UnexpectedException(Messages.getString("rmi.0C"), e); //$NON-NLS-1$
        }
    }
}
